name: CmdStanPy

on:
  push:
    branches:
      - 'develop'
      - 'master'
    tags:
      - '**'
  pull_request:
  workflow_dispatch:
    inputs:
      cmdstan-version:
        description: 'Version to test'
        required: false
        default: ''

jobs:
  get-cmdstan-version:
    # get the latest cmdstan version to use as part of the cache key
    name: grab version
    runs-on: ubuntu-latest
    steps:
      - name: Get CmdStan version
        id: check-cmdstan
        run: |
            if [[ "${{ github.event.inputs.cmdstan-version }}" != "" ]]; then
              echo "::set-output name=version::${{ github.event.inputs.cmdstan-version }}"
            else
                echo "::set-output name=version::$(python -c 'import requests;print(requests.get("https://api.github.com/repos/stan-dev/cmdstan/releases/latest").json()["tag_name"][1:])')"
            fi
    outputs:
      version: ${{ steps.check-cmdstan.outputs.version }}

  cmdstanpy:
    needs: get-cmdstan-version
    name: tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        python-version: [3.8]
    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Check out github
        uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies (python)
        run: |
          pip install --upgrade pip wheel
          pip install -r requirements.txt
          pip install -r requirements-test.txt
          pip install codecov

     

      - name: Build wheel
        run: python setup.py bdist_wheel

      - name: Install wheel (Linux, macOS)
        if: matrix.os != 'windows-latest'
        run: pip install dist/*.whl

     

      - name: Show libraries
        run: python -m pip freeze

      - name: Get system info
        uses: kenchan0130/actions-system-info@v1.0.0
        id: system-info

      - name: CmdStan installation cacheing
        uses: actions/cache@v2
        with:
          path: ~/.cmdstan
          key: ${{ runner.os }}-${{ steps.system-info.outputs.release }}-cmdstan-${{ needs.get-cmdstan-version.outputs.version }}-${{ hashFiles('**/install_cmdstan.py') }}

      - name: Install CmdStan (Linux, macOS)
        if: matrix.os != 'windows-latest'
        run: |
          install_cmdstan -h
          install_cxx_toolchain -h
          python -m cmdstanpy.install_cmdstan --version ${{ needs.get-cmdstan-version.outputs.version }}

      

      - name: Run tests
        run: |
          mkdir run_tests
          cd run_tests
          pytest -v ../test --cov=../cmdstanpy

      - name: Run model with requirements-optional.txt
        run: |
          cd run_tests
          python -m pip install -r ../requirements-optional.txt
          python ../test/example_script.py

      - name: Submit codecov
        run: |
          cd run_tests
          codecov
          
       
  test-aarch64:
    name: build_arm64
    runs-on: ubuntu-latest
    strategy:
        fail-fast: false 
    steps:
    - uses: actions/checkout@v2
    - name: Set up QEMU
      id: qemu
      uses: docker/setup-qemu-action@v1
    - name: Build and Test for arm64
      run: |
           docker run --rm -v ${{ github.workspace }}:/ws:rw --workdir=/ws \
           arm64v8/ubuntu:latest \
           bash -exc 'apt-get update && apt-get -y install git && \
           ln -fs /usr/share/zoneinfo/America/New_York /etc/localtime && export DEBIAN_FRONTEND=noninteractive && apt-get install -y tzdata && dpkg-reconfigure --frontend noninteractive tzdata && \
           apt install -y software-properties-common && \
           add-apt-repository ppa:deadsnakes/ppa && \
           apt install -y python3.8 && \
           apt install -y python3.8-venv && \
           python3.8 -m venv venv38 && \
           source venv38/bin/activate && \
           python -m pip install --upgrade pip wheel && \
           python -m pip install -r requirements.txt && \
           python -m pip install -r requirements-test.txt && \
           python -m pip install codecov && \
           python setup.py bdist_wheel && \
           pip install dist/*.whl && \
           python -m pip freeze && \
           git clone https://github.com/stan-dev/cmdstan.git --recursive && \
           cd cmdstan && \
           make build && \
           python setup.py install && \
           mkdir run_tests && \
           cd run_tests && \
           pytest -v ../test --cov=../cmdstanpy'           
